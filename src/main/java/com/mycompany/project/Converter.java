/*
Project Topic : Currency platform
Group Members : Muhammad Urwah , Taha Mehdi , Umair Alam
*/
package com.mycompany.project;

import java.sql.*;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;


public class Converter extends javax.swing.JFrame {

    public Converter() {
        initComponents();
        Connect();
        this.setLocationRelativeTo(null);
    }
    Connection connection;
    PreparedStatement pst;
    ResultSet rs;
    Statement stmt;
    public void Connect()
    {
        String url = "jdbc:mysql://localhost:3306/currencyconverter";
        String username = "root";
        String password = "";
        try{
        connection = DriverManager.getConnection(url,username,password);
            //System.out.println("EZ");
        }
        
        catch(SQLException e){System.out.println("oops");
        JOptionPane.showMessageDialog(this, "Error"
                + "\nDatabase failed to connect"
                + "\nDatabase has to be connected");
        };
    }
    public void LoadCurrencies()
    {
        try {
            pst = connection.prepareStatement("SELECT ID FROM currencydata");
            rs = pst.executeQuery();
            } catch (SQLException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        txtfrom = new javax.swing.JComboBox<>();
        txtto = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jbConvert = new javax.swing.JButton();
        help = new javax.swing.JButton();
        txtamount = new java.awt.TextField();
        Result = new javax.swing.JTextField();

        jLabel1.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        jLabel1.setText("Currency Converter");

        jPanel1.setBackground(new java.awt.Color(66, 164, 245));
        jPanel1.setForeground(new java.awt.Color(66, 164, 245));

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(250, 250, 250));
        jLabel6.setText("Currency Converter");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(60, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(52, 52, 52))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setBackground(new java.awt.Color(50, 250, 250));
        setForeground(java.awt.Color.black);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(68, 207, 96));
        jPanel2.setForeground(new java.awt.Color(66, 164, 245));

        jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(250, 250, 250));
        jLabel7.setText("Currency Converter");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(60, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(52, 52, 52))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(250, 250, 250));
        jPanel3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel3KeyPressed(evt);
            }
        });

        txtfrom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "USD", "PKR", "BTC", "ETH", "DOGE", "BND", "ADA", "XRP", "DOT", "UNI" }));
        txtfrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfromActionPerformed(evt);
            }
        });

        txtto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "USD", "PKR", "BTC", "ETH", "DOGE", "BND", "ADA", "XRP", "DOT", "UNI" }));
        txtto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txttoActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel2.setText("2nd Currency");

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel3.setText("1st Currency");

        jLabel4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel4.setText("Amount");

        jLabel5.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel5.setText("Result");

        jbConvert.setText("Convert");
        jbConvert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbConvertActionPerformed(evt);
            }
        });

        help.setText("?");
        help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpActionPerformed(evt);
            }
        });

        txtamount.setText("1");
        txtamount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtamountActionPerformed(evt);
            }
        });

        Result.setEditable(false);
        Result.setFont(new java.awt.Font("Dialog", 0, 11)); // NOI18N
        Result.setText("1");
        Result.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResultActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jbConvert, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(help)
                        .addGap(29, 29, 29))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtamount, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(txtfrom, 0, 140, Short.MAX_VALUE)
                            .addComponent(txtto, 0, 140, Short.MAX_VALUE)
                            .addComponent(Result))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtfrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(78, 78, 78)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtamount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(Result, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jbConvert)
                    .addComponent(help))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtamountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtamountActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtamountActionPerformed

    private void txtfromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfromActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfromActionPerformed

    private void txttoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txttoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txttoActionPerformed

    private void jbConvertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbConvertActionPerformed
  
            Double tot;
            Double amount = Double.parseDouble(txtamount.getText());
            Connect();
            try {
        Statement stmt = connection.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY);
        ResultSet srs;
        
        String q = "SELECT * FROM currencydata where ID = ?";
        pst = connection.prepareStatement(q);
        pst.setString(1,"1");
        srs= pst.executeQuery();
            if(srs.next()== true) {
            double USD = srs.getDouble("USD");
            double PKR = srs.getDouble("PKR");
            double BTC = srs.getDouble("BTC");
            double ETH = srs.getDouble("ETH");
            double DOGE = srs.getDouble("DOGE");
            double BNB = srs.getDouble("BNB");
            double ADA = srs.getDouble("ADA");
            double XRP = srs.getDouble("XRP");
            double DOT = srs.getDouble("DOT");
            double UNI = srs.getDouble("UNI");
            
            if(txtfrom.getSelectedItem().toString() == "USD" && txtto.getSelectedItem().toString() == "USD")
            {
                tot = amount * USD;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "USD" && txtto.getSelectedItem().toString() == "PKR")
            {
                tot = amount * PKR;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "USD" && txtto.getSelectedItem().toString() == "BTC")
            {
                tot = amount * BTC;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "USD" && txtto.getSelectedItem().toString() == "ETH")
            {
                tot = amount * ETH;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "USD" && txtto.getSelectedItem().toString() == "DOGE")
            {
                tot = amount * DOGE;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "USD" && txtto.getSelectedItem().toString() == "BNB")
            {
                tot = amount * BNB;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "USD" && txtto.getSelectedItem().toString() == "ADA")
            {
                tot = amount * ADA;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "USD" && txtto.getSelectedItem().toString() == "XRP")
            {
                tot = amount * XRP;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "USD" && txtto.getSelectedItem().toString() == "DOT")
            {
                tot = amount * DOT;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "USD" && txtto.getSelectedItem().toString() == "UNI")
            {
                tot = amount * UNI;
                Result.setText(String.valueOf(tot));
            }
            
            else if(txtfrom.getSelectedItem().toString() == "PKR" && txtto.getSelectedItem().toString() == "PKR")
            {
                tot = amount;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "PKR" && txtto.getSelectedItem().toString() == "USD")
            {
                tot = amount * (1/PKR);
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "PKR" && txtto.getSelectedItem().toString() == "BTC")
            {
                tot = amount * (1/PKR)* BTC;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "PKR" && txtto.getSelectedItem().toString() == "ETH")
            {
                tot = amount * (1/PKR)* ETH;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "PKR" && txtto.getSelectedItem().toString() == "DOGE")
            {
                tot = amount * (1/PKR)* DOGE;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "PKR" && txtto.getSelectedItem().toString() == "BNB")
            {
                tot = amount *(1/PKR)* BNB;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "PKR" && txtto.getSelectedItem().toString() == "ADA")
            {
                tot = amount *(1/PKR)* ADA;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "PKR" && txtto.getSelectedItem().toString() == "XRP")
            {
                tot = amount *(1/PKR)* XRP;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "PKR" && txtto.getSelectedItem().toString() == "DOT")
            {
                tot = amount *(1/PKR)* DOT;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "PKR" && txtto.getSelectedItem().toString() == "UNI")
            {
                tot = amount *(1/PKR)* UNI;
                Result.setText(String.valueOf(tot));
            }
            
            else if(txtfrom.getSelectedItem().toString() == "BTC" && txtto.getSelectedItem().toString() == "USD")
            {
                tot = amount * (1/BTC);
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BTC" && txtto.getSelectedItem().toString() == "PKR")
            {
                tot = amount * (1/BTC) * PKR;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BTC" && txtto.getSelectedItem().toString() == "BTC")
            {
                tot = amount;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BTC" && txtto.getSelectedItem().toString() == "ETH")
            {
                tot = amount * (1/BTC) * ETH;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BTC" && txtto.getSelectedItem().toString() == "DOGE")
            {
                tot = amount * (1/BTC) * DOGE;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BTC" && txtto.getSelectedItem().toString() == "BNB")
            {
                tot = amount *(1/BTC)* BNB;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BTC" && txtto.getSelectedItem().toString() == "ADA")
            {
                tot = amount *(1/BTC)* ADA;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BTC" && txtto.getSelectedItem().toString() == "XRP")
            {
                tot = amount *(1/BTC)* XRP;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BTC" && txtto.getSelectedItem().toString() == "DOT")
            {
                tot = amount *(1/BTC)* DOT;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BTC" && txtto.getSelectedItem().toString() == "UNI")
            {
                tot = amount *(1/BTC)* UNI;
                Result.setText(String.valueOf(tot));
            }
            
            else if(txtfrom.getSelectedItem().toString() == "ETH" && txtto.getSelectedItem().toString() == "USD")
            {
                tot = amount * (1/ETH);
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ETH" && txtto.getSelectedItem().toString() == "PKR")
            {
                tot = amount * (1/ETH) * PKR;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ETH" && txtto.getSelectedItem().toString() == "BTC")
            {
                tot = amount * (1/ETH) * BTC;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ETH" && txtto.getSelectedItem().toString() == "ETH")
            {
                tot = amount * (1/ETH) * ETH;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ETH" && txtto.getSelectedItem().toString() == "DOGE")
            {
                tot = amount * (1/ETH) * DOGE;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ETH" && txtto.getSelectedItem().toString() == "BNB")
            {
                tot = amount *(1/ETH)* BNB;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ETH" && txtto.getSelectedItem().toString() == "ADA")
            {
                tot = amount *(1/ETH)* ADA;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ETH" && txtto.getSelectedItem().toString() == "XRP")
            {
                tot = amount *(1/ETH)* XRP;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ETH" && txtto.getSelectedItem().toString() == "DOT")
            {
                tot = amount *(1/ETH)* DOT;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ETH" && txtto.getSelectedItem().toString() == "UNI")
            {
                tot = amount *(1/ETH)* UNI;
                Result.setText(String.valueOf(tot));
            }
            
            else if(txtfrom.getSelectedItem().toString() == "DOGE" && txtto.getSelectedItem().toString() == "USD")
            {
                tot = amount * (1/DOGE);
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOGE" && txtto.getSelectedItem().toString() == "PKR")
            {
                tot = amount * (1/DOGE) * PKR;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOGE" && txtto.getSelectedItem().toString() == "BTC")
            {
                tot = amount * (1/DOGE) * BTC;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOGE" && txtto.getSelectedItem().toString() == "ETH")
            {
                tot = amount * (1/DOGE) * ETH;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOGE" && txtto.getSelectedItem().toString() == "DOGE")
            {
                tot = amount;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOGE" && txtto.getSelectedItem().toString() == "BNB")
            {
                tot = amount *(1/DOGE)* BNB;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOGE" && txtto.getSelectedItem().toString() == "ADA")
            {
                tot = amount *(1/DOGE)* ADA;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOGE" && txtto.getSelectedItem().toString() == "XRP")
            {
                tot = amount *(1/DOGE)* XRP;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOGE" && txtto.getSelectedItem().toString() == "DOT")
            {
                tot = amount *(1/DOGE)* DOT;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOGE" && txtto.getSelectedItem().toString() == "UNI")
            {
                tot = amount *(1/DOGE)* UNI;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BNB" && txtto.getSelectedItem().toString() == "USD")
            {
                tot = amount * (1/BNB);
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BNB" && txtto.getSelectedItem().toString() == "PKR")
            {
                tot = amount * (1/BNB) * PKR;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BNB" && txtto.getSelectedItem().toString() == "BTC")
            {
                tot = amount * (1/BNB) * BTC;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BNB" && txtto.getSelectedItem().toString() == "ETH")
            {
                tot = amount * (1/BNB) * ETH;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BNB" && txtto.getSelectedItem().toString() == "DOGE")
            {
                tot = amount*(1/BNB)*DOGE;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BNB" && txtto.getSelectedItem().toString() == "BNB")
            {
                tot = amount ;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BNB" && txtto.getSelectedItem().toString() == "ADA")
            {
                tot = amount *(1/BNB)* ADA;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BNB" && txtto.getSelectedItem().toString() == "XRP")
            {
                tot = amount *(1/BNB)* XRP;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BNB" && txtto.getSelectedItem().toString() == "DOT")
            {
                tot = amount *(1/BNB)* DOT;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "BNB" && txtto.getSelectedItem().toString() == "UNI")
            {
                tot = amount *(1/BNB)* UNI;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ADA" && txtto.getSelectedItem().toString() == "USD")
            {
                tot = amount * (1/ADA);
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ADA" && txtto.getSelectedItem().toString() == "PKR")
            {
                tot = amount * (1/ADA) * PKR;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ADA" && txtto.getSelectedItem().toString() == "BTC")
            {
                tot = amount * (1/ADA) * BTC;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ADA" && txtto.getSelectedItem().toString() == "ETH")
            {
                tot = amount * (1/ADA) * ETH;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ADA" && txtto.getSelectedItem().toString() == "DOGE")
            {
                tot = amount*(1/ADA)*DOGE;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ADA" && txtto.getSelectedItem().toString() == "BNB")
            {
                tot = amount *(1/ADA)* BNB;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ADA" && txtto.getSelectedItem().toString() == "ADA")
            {
                tot = amount ;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ADA" && txtto.getSelectedItem().toString() == "XRP")
            {
                tot = amount *(1/ADA)* XRP;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ADA" && txtto.getSelectedItem().toString() == "DOT")
            {
                tot = amount *(1/ADA)* DOT;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "ADA" && txtto.getSelectedItem().toString() == "UNI")
            {
                tot = amount *(1/ADA)* UNI;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "XRP" && txtto.getSelectedItem().toString() == "USD")
            {
                tot = amount * (1/XRP);
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "XRP" && txtto.getSelectedItem().toString() == "PKR")
            {
                tot = amount * (1/XRP) * PKR;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "XRP" && txtto.getSelectedItem().toString() == "BTC")
            {
                tot = amount * (1/XRP) * BTC;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "XRP" && txtto.getSelectedItem().toString() == "ETH")
            {
                tot = amount * (1/XRP) * ETH;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "XRP" && txtto.getSelectedItem().toString() == "DOGE")
            {
                tot = amount*(1/XRP)*DOGE;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "XRP" && txtto.getSelectedItem().toString() == "BNB")
            {
                tot = amount *(1/XRP)* BNB;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "XRP" && txtto.getSelectedItem().toString() == "ADA")
            {
                tot = amount *(1/XRP)* ADA;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "XRP" && txtto.getSelectedItem().toString() == "XRP")
            {
                tot = amount ;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "XRP" && txtto.getSelectedItem().toString() == "DOT")
            {
                tot = amount *(1/XRP)* DOT;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "XRP" && txtto.getSelectedItem().toString() == "UNI")
            {
                tot = amount *(1/XRP)* UNI;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOT" && txtto.getSelectedItem().toString() == "USD")
            {
                tot = amount * (1/DOT);
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOT" && txtto.getSelectedItem().toString() == "PKR")
            {
                tot = amount * (1/DOT) * PKR;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOT" && txtto.getSelectedItem().toString() == "BTC")
            {
                tot = amount * (1/DOT) * BTC;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOT" && txtto.getSelectedItem().toString() == "ETH")
            {
                tot = amount * (1/DOT) * ETH;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOT" && txtto.getSelectedItem().toString() == "DOGE")
            {
                tot = amount*(1/DOT)*DOGE;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOT" && txtto.getSelectedItem().toString() == "BNB")
            {
                tot = amount *(1/DOT)* BNB;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOT" && txtto.getSelectedItem().toString() == "ADA")
            {
                tot = amount *(1/DOT)* ADA;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOT" && txtto.getSelectedItem().toString() == "XRP")
            {
                tot = amount *(1/DOT)* XRP;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOT" && txtto.getSelectedItem().toString() == "DOT")
            {
                tot = amount;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "DOT" && txtto.getSelectedItem().toString() == "UNI")
            {
                tot = amount *(1/DOT)* UNI;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "UNI" && txtto.getSelectedItem().toString() == "USD")
            {
                tot = amount * (1/UNI);
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "UNI" && txtto.getSelectedItem().toString() == "PKR")
            {
                tot = amount * (1/UNI) * PKR;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "UNI" && txtto.getSelectedItem().toString() == "BTC")
            {
                tot = amount * (1/UNI) * BTC;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "UNI" && txtto.getSelectedItem().toString() == "ETH")
            {
                tot = amount * (1/UNI) * ETH;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "UNI" && txtto.getSelectedItem().toString() == "DOGE")
            {
                tot = amount*(1/UNI)*DOGE;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "UNI" && txtto.getSelectedItem().toString() == "BNB")
            {
                tot = amount *(1/UNI)* BNB;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "UNI" && txtto.getSelectedItem().toString() == "ADA")
            {
                tot = amount *(1/UNI)* ADA;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "UNI" && txtto.getSelectedItem().toString() == "XRP")
            {
                tot = amount *(1/UNI)* XRP;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "UNI" && txtto.getSelectedItem().toString() == "DOT")
            {
                tot = amount *(1/UNI)* DOT;
                Result.setText(String.valueOf(tot));
            }
            else if(txtfrom.getSelectedItem().toString() == "UNI" && txtto.getSelectedItem().toString() == "UNI")
            {
                tot = amount;
                Result.setText(String.valueOf(tot));
            }
            
        }   
            } catch (SQLException ex) {
            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error"
                + "\nDatabase failed to connect"
                + "\nDatabase has to be connected");}
            
        
    }//GEN-LAST:event_jbConvertActionPerformed

    private void helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpActionPerformed
        JOptionPane.showMessageDialog(this, "Select the currencies you want to convert from the two Lists."
                + "\nEnter the Amount you want to convert into the Amount Textbox"
                + "\nAfter that Click on Convert to get your Answer");
        
    }//GEN-LAST:event_helpActionPerformed

    private void ResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ResultActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    private void jPanel3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel3KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel3KeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }try {
    for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Windows".equals(info.getName())) {
            javax.swing.UIManager.setLookAndFeel(info.getClassName());
            break;
        }
    }
} catch (ClassNotFoundException ex) {
    java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
} catch (InstantiationException ex) {
    java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
} catch (IllegalAccessException ex) {
    java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
} catch (javax.swing.UnsupportedLookAndFeelException ex) {
    java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
}
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Converter().setVisible(true);
            }
        });
    }
   
    public Double USD ;
    public Double PKR ;
    public Double BTC ;
    public Double ETH ;
    public Double DOGE ;
    public Double USPKR ;
    public Double USBTC ;
    public Double USETH ;
    public Double USDOGE ;


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Result;
    private javax.swing.JButton help;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton jbConvert;
    private java.awt.TextField txtamount;
    private javax.swing.JComboBox<String> txtfrom;
    private javax.swing.JComboBox<String> txtto;
    // End of variables declaration//GEN-END:variables
}
